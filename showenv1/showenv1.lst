     1                                  section .data
     2                                  
     3 00000000 5465726D696E617465-         Errmsg db "Terminated with error.",10
     3 00000009 642077697468206572-
     3 00000012 726F722E0A         
     4                                      ERRLEN equ $-Errmsg
     5                                  
     6                                  section .bss
     7                                  
     8                                      MAXENV equ 300             ;maximum number of enviournment we support
     9 00000000 <res 4B0h>              Envlen: resd MAXENV           ;table of pointers to enviournment
    10                                  
    11                                  section .text
    12                                  
    13                                  global _start
    14                                  
    15                                  _start:
    16                                  
    17 00000000 90                          nop                         ;keep gdb happy
    18                                  
    19                                      ;get the enviournment count in ecx and validate
    20 00000001 89E5                        mov ebp,esp                   ;move stack pointer to base ponter
    21 00000003 31C0                        xor eax,eax                   ;clear eax loop counter
    22                                  
    23                                  ; FindEnv:
    24                                      ; mov ecx,0000ffffh           ;limit search   
    25                                      ; mov edi,ebp                 ;put address of string
    26                                      ; mov edx,edi                 ;copy string address
    27                                      ; cld                         ;set flag
    28                                      ; repne scasb                 ;scan null ptr in string at edi
    29                                      ; jnz Error                   ;ended with finding at edi
    30                                      ; mov ebp,edi                 ;env address begin after null ptr
    31                                      ; xor ebx,ebx                 ;zero ebx for other use
    32                                  
    33 00000005 59                          pop ecx                     ;pop value into ecx
    34 00000006 8D6C8D08                    lea ebp,[ebp+ecx*4+8]       ;args address ecx * 4 + null 4 + argcount 4
    35                                      ; add ebp,4                   ;skip argument
    36                                  ; FindEnv:
    37                                  ;     add ebp,4                   ;skip argumnet adress
    38                                  ;     dec ecx                     ;dec argcount
    39                                  ;     cmp ecx,0                   ;compare argument list
    40                                  ;     jnz FindEnv                 ;repeat till 0
    41                                  ;     add ebp,4                   ;remove null string
    42                                      
    43                                      ;we now know the address
    44                                  Scanone:
    45 0000000A B9FFFF0000                  mov ecx,0000ffffh           ;limit search to 65535 byte maxenvs
    46 0000000F 8B7C9D00                    mov edi,dword [ebp+ebx*4] ;put address of string to serach in edi
    47 00000013 83FF00                      cmp edi,0                 ;see if we hit second pointer
    48 00000016 7419                        je Showem                 ;if yes then show them all
    49 00000018 89FA                        mov edx,edi               ;copy stirng adress to edx
    50 0000001A FC                          cld                       ;set flag
    51 0000001B F2AE                        repne scasb               ;search for 0 at end
    52 0000001D 7533                        jnz Error                 ;ended failed
    53 0000001F C647FF0A                    mov byte[edi-1],10        ;put EOL where 0
    54 00000023 29D7                        sub edi,edx               ;sub for length
    55 00000025 893C9D[00000000]            mov dword[Envlen+ebx*4],edi ;put length into table
    56 0000002C 43                          inc ebx                     ;add 1 env into table
    57 0000002D EBDB                        jmp Scanone                 ;loopback for another
    58                                  
    59                                      ;Display enviournment to stdout
    60 0000002F 31F6                        xor esi,esi                 ;start at 0(for table adressing reasons)
    61                                  Showem:
    62 00000031 8B4CB500                    mov ecx,[ebp+esi*4]     ;pass offset to message
    63 00000035 B804000000                  mov eax,4                   ;specify sys_write call
    64 0000003A BB01000000                  mov ebx,1                   ;specify file descriptor 1,stdout
    65 0000003F 8B14B5[00000000]            mov edx,[Envlen+esi*4]     ;pass length of message
    66 00000046 CD80                        int 80h                     ;make kernel call
    67 00000048 46                          inc esi                     ;increment for next enviournment
    68 00000049 837CB50000                  cmp dword[ebp+esi*4],0          ;see if we displayed all enviournments
    69 0000004E 75E1                        jne Showem                   ;if not loop countinues
    70 00000050 EB16                        jmp Exit                    ;we finish we exit
    71                                  
    72                                  Error:
    73 00000052 B804000000                  mov eax,4                   ;mention sys_write call
    74 00000057 BB02000000                  mov ebx,2                   ;specify file descriptor 2,stderr
    75 0000005C B9[00000000]                mov ecx,Errmsg              ;mention Errmsg address
    76 00000061 BA17000000                  mov edx,ERRLEN              ;mention error length
    77 00000066 CD80                        int 80h                     ;make kernel call
    78                                  
    79                                  Exit:
    80 00000068 B801000000                  mov eax,1                   ;specify sys_exit call
    81 0000006D BB00000000                  mov ebx,0                   ;specify return value 0
    82 00000072 CD80                        int 80h                     ;kernel call for sys_exit
    83                                      
