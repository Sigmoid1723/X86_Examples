     1                                  section .data
     2                                  
     3 00000000 5465726D696E617465-         Errmsg db "Terminated with error.",10
     3 00000009 642077697468206572-
     3 00000012 726F722E0A         
     4                                      ERRLEN equ $-Errmsg
     5                                  
     6                                  section .bss
     7                                  
     8                                      MAXARGS equ 10              ;maximum number of argument we support
     9 00000000 ????????                Argcount: resd 1                ;# of argument passed to program
    10 00000004 <res 28h>               Argptrs: resd MAXARGS           ;table of pointers to argument
    11 0000002C <res 28h>               Arglens: resd MAXARGS           ;table of argument list
    12                                  
    13                                  section .text
    14                                  
    15                                  global _start
    16                                  
    17                                  _start:
    18                                  
    19 00000000 90                          nop                         ;keep gdb happy
    20                                  
    21                                      ;get the argument count in ecx and validate
    22 00000001 59                          pop ecx                     ;TOS contain argument and we pop in in ecx
    23 00000002 83F90A                      cmp ecx,MAXARGS             ;see if arg count exceeds maxargs
    24 00000005 7768                        ja Error                    ;if more the error
    25 00000007 890D[00000000]              mov dword[Argcount],ecx     ;save argcount in memory varaiable
    26                                  
    27                                      ;once we know how many args are there loop will pop into argptrs
    28 0000000D 31D2                        xor edx,edx                 ;clear edx loop counter
    29                                  Saveargs:
    30 0000000F 8F0495[04000000]            pop dword[Argptrs + edx*4]  ;pop an arg adress into memory table
    31 00000016 42                          inc edx                     ;increment of next counter
    32 00000017 39CA                        cmp edx,ecx                 ;compare till number of argument
    33 00000019 72F4                        jb Saveargs                 ;if not loop back furthure
    34                                  
    35                                      ;with argptrs stored,time to calculate their lenghts
    36 0000001B 31C0                        xor eax,eax                 ;clear eax for searching 0 byte(since each string terminated with one 0 byte)
    37 0000001D 31DB                        xor ebx,ebx                 ;pointer table offset address starts at 0
    38                                  
    39                                  Scanone:
    40 0000001F B9FFFF0000                  mov ecx,0000ffffh           ;limit search to 65535 byte maxargs
    41 00000024 8B3C9D[04000000]            mov edi,dword [Argptrs+ebx*4] ;put address of string to serach in edi
    42 0000002B 89FA                        mov edx,edi                   ;copy stirng address to edx
    43 0000002D FC                          cld                           ;clear direction flag
    44 0000002E F2AE                        repne scasb                   ;repeat till 0 encounter
    45 00000030 753D                        jnz Error                     ;it didn't find 0
    46 00000032 C647FF0A                    mov byte[edi-1],10            ;store EOL where 0 was there
    47 00000036 29D7                        sub edi,edx                   ;subset positon of 0 form last address
    48 00000038 893C9D[2C000000]            mov dword[Arglens+ebx*4],edi  ;put length of argument in table
    49 0000003F 43                          inc ebx                       ;add 1 to argument counter
    50 00000040 3B1D[00000000]              cmp ebx,[Argcount]            ;see if exceeds argcount
    51 00000046 72D7                        jb Scanone                    ;if not loop back for another one
    52                                  
    53                                      ;Display argument to stdout
    54 00000048 31F6                        xor esi,esi                 ;start at 0(for table adressing reasons)
    55                                  Showem:
    56 0000004A 8B0CB5[04000000]            mov ecx,[Argptrs+esi*4]     ;pass offset to message
    57 00000051 B804000000                  mov eax,4                   ;specify sys_write call
    58 00000056 BB01000000                  mov ebx,1                   ;specify file descriptor 1,stdout
    59 0000005B 8B14B5[2C000000]            mov edx,[Arglens+esi*4]     ;pass length of message
    60 00000062 CD80                        int 80h                     ;make kernel call
    61 00000064 46                          inc esi                     ;increment for next argument
    62 00000065 3B35[00000000]              cmp esi,[Argcount]          ;see if we displayed all arguments
    63 0000006B 72DD                        jb Showem                   ;if not loop countinues
    64 0000006D EB16                        jmp Exit                    ;we finish we exit
    65                                  
    66                                  Error:
    67 0000006F B804000000                  mov eax,4                   ;mention sys_write call
    68 00000074 BB02000000                  mov ebx,2                   ;specify file descriptor 2,stderr
    69 00000079 B9[00000000]                mov ecx,Errmsg              ;mention Errmsg address
    70 0000007E BA17000000                  mov edx,ERRLEN              ;mention error length
    71 00000083 CD80                        int 80h                     ;make kernel call
    72                                  
    73                                  Exit:
    74 00000085 B801000000                  mov eax,1                   ;specify sys_exit call
    75 0000008A BB00000000                  mov ebx,0                   ;specify return value 0
    76 0000008F CD80                        int 80h                     ;kernel call for sys_exit
    77                                      
